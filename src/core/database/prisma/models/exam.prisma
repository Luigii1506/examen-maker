// ===========================================
// EXAM SYSTEM MODELS
// ===========================================
// Models for managing exams, questions, and answers

model Exam {
  id          String   @id @default(cuid())
  title       String
  description String?
  duration    Int      // Duration in minutes
  category    String
  difficulty  ExamDifficulty
  totalQuestions Int
  passingScore   Int    // Minimum score to pass (percentage)
  status      ExamStatus @default(DRAFT)
  
  // Exam type determines behavior
  examType    ExamType @default(SCHEDULED)
  
  // Global exam timing (controlled by admin for SCHEDULED type)
  examStartedAt DateTime?  // When admin started the exam (SCHEDULED only)
  examEndsAt    DateTime?  // When the exam will end (SCHEDULED only)
  
  // Relationships
  questions     Question[]
  attempts      ExamAttempt[]
  assignments   ExamAssignment[] // Users assigned (SCHEDULED and SELF_PACED)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // User ID who created the exam
  
  @@map("exams")
}

model Question {
  id           String      @id @default(cuid())
  examId       String?     // Optional - questions can exist without being assigned to an exam
  text         String      @db.Text
  type         QuestionType
  cognitiveType CognitiveType
  category     String
  difficulty   QuestionDifficulty
  points       Int         @default(1)
  order        Int?        // Order within the exam
  status       QuestionStatus @default(ACTIVE)
  
  // Question-specific data
  scenario     String?     @db.Text  // Optional scenario/context
  explanation  String?     @db.Text  // Explanation for the correct answer
  
  // JSON fields for flexible question data
  correctAnswer Json       // Stores correct answer(s) - flexible for different types
  metadata     Json?       // Additional metadata (time limits, hints, etc.)
  
  // For matching questions
  leftColumn   Json?       // Array of left column items for matching questions
  rightColumn  Json?       // Array of right column items for matching questions
  correctMatches Json?     // Object mapping correct matches for matching questions
  
  // Relationships
  exam         Exam?       @relation(fields: [examId], references: [id], onDelete: SetNull)
  options      QuestionOption[]
  attempts     QuestionAttempt[]
  
  // Metadata
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String?     // User ID who created the question
  
  @@map("questions")
}

model QuestionOption {
  id         String   @id @default(cuid())
  questionId String
  text       String   @db.Text
  isCorrect  Boolean  @default(false)
  order      Int      // Order of the option
  metadata   Json?    // Additional metadata
  
  // Relationships
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("question_options")
}

model ExamAttempt {
  id          String           @id @default(cuid())
  examId      String
  userId      String
  status      AttemptStatus    @default(IN_PROGRESS)
  
  // Timing
  startedAt   DateTime         @default(now())
  finishedAt  DateTime?
  timeElapsed Int?             // Time elapsed in seconds
  
  // Scoring
  totalScore    Int            @default(0)
  earnedScore   Int            @default(0)
  percentage    Float          @default(0)
  passed        Boolean        @default(false)
  
  // Relationships
  exam        Exam             @relation(fields: [examId], references: [id], onDelete: Cascade)
  answers     QuestionAttempt[]
  
  // Metadata
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  @@map("exam_attempts")
}

model QuestionAttempt {
  id              String      @id @default(cuid())
  examAttemptId   String
  questionId      String
  selectedAnswer  Json        // Flexible storage for different answer types
  isCorrect       Boolean     @default(false)
  pointsEarned    Int         @default(0)
  timeSpent       Int?        // Time spent on this question in seconds
  
  // Relationships
  examAttempt     ExamAttempt @relation(fields: [examAttemptId], references: [id], onDelete: Cascade)
  question        Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@unique([examAttemptId, questionId])
  @@map("question_attempts")
}

model ExamAssignment {
  id        String   @id @default(cuid())
  examId    String
  userId    String
  status    AssignmentStatus @default(ASSIGNED)
  
  // Assignment details
  assignedAt  DateTime  @default(now())
  assignedBy  String?   // Admin who assigned the user
  
  // Relationships
  exam      Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@unique([examId, userId])
  @@map("exam_assignments")
}

model Certificate {
  id              String           @id @default(cuid())
  userId          String
  examAttemptId   String           @unique
  certificateNumber String         @unique
  
  // Certificate details
  candidateName   String
  candidateEmail  String
  examTitle       String
  score           Int
  issuedDate      DateTime         @default(now())
  expiryDate      DateTime
  status          CertificateStatus @default(ACTIVE)
  
  // Download tracking
  downloadCount   Int              @default(0)
  lastDownloaded  DateTime?
  
  // Metadata
  metadata        Json?            // Additional certificate data
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("certificates")
}

// ===========================================
// ENUMS
// ===========================================

enum ExamDifficulty {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum ExamType {
  SCHEDULED   // Admin assigns users and controls start time
  SELF_PACED  // Admin assigns users, they start when they want
  PUBLIC      // Open to all users, no assignment needed
}

enum ExamStatus {
  DRAFT       // Being created by admin
  ASSIGNED    // Assigned to users but not started (SCHEDULED/SELF_PACED)
  STARTED     // Admin has started the exam, users can take it (SCHEDULED only)
  ACTIVE      // Exam is active and available (SELF_PACED/PUBLIC)
  COMPLETED   // Exam time has ended (SCHEDULED only)
  ARCHIVED    // Archived
  SUSPENDED   // Temporarily suspended
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  MATCHING
}

enum CognitiveType {
  REMEMBER
  UNDERSTAND
  APPLY
  ANALYZE
  EVALUATE
  CREATE
}

enum QuestionDifficulty {
  BASIC
  INTERMEDIATE
  ADVANCED
}

enum QuestionStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  UNDER_REVIEW
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  SUSPENDED
}

enum AssignmentStatus {
  ASSIGNED    // User is assigned to the exam
  STARTED     // User has started taking the exam
  COMPLETED   // User has completed the exam
  CANCELLED   // Assignment was cancelled
}

enum CertificateStatus {
  ACTIVE
  EXPIRED
  REVOKED
  SUSPENDED
} 